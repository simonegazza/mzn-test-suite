Comps = {frontend0, frontend1, frontend2, backend0, backend1, backend2, database0, database1};
mustComps = {frontend0, frontend1, frontend2};
Flavs = {tiny, medium, large};
Nodes = {n1, n2, n3};
CRes = {CPU, RAM, storage, bwIn, bwOut};
NRes = {ssl, fwall, encr, avail, latency};
Flav = [{medium, large}, {medium, large}, {medium, large}, {tiny, medium, large}, {tiny, medium, large}, {tiny, medium, large}, {large}, {large}];
Uses = array2d(CompFlavs, CompFlavs, [
	0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
	0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,
	0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
]);
mayUse = array2d(Comps, CompFlavs, [
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,
	0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,
	1,1,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
]);
MIN_RBOUNDS = 0;
MAX_RBOUNDS = 1000000;

worstBounds = [0, 0, 0, 0, 0, 0, 0, 0, 0, MAX_RBOUNDS];
bestBounds = [MAX_RBOUNDS - i | i in worstBounds];

comReq = array2d(CompFlavs, Res, [
  8, 370, 273, 308, 795, 1, 1, 1, 97, MAX_RBOUNDS,
  2, 432, 262, 910, 526, 0, 0, 0, 96, MAX_RBOUNDS,
  2, 315, 276, 821, 818, 1, 0, 0, 95, MAX_RBOUNDS,
  4, 413, 431, 555, 425, 1, 0, 1, 96, MAX_RBOUNDS,
  8, 210, 305, 728, 677, 1, 1, 1, 95, MAX_RBOUNDS,
  4, 374, 283, 737, 938, 1, 1, 1, 97, MAX_RBOUNDS,
  4, 415, 277, 877, 621, 0, 1, 1, 95, MAX_RBOUNDS,
  8, 334, 430, 527, 251, 1, 0, 1, 95, MAX_RBOUNDS,
  2, 425, 217, 235, 307, 0, 1, 0, 96, MAX_RBOUNDS,
  8, 414, 250, 516, 980, 1, 1, 0, 97, MAX_RBOUNDS,
  2, 246, 458, 929, 970, 1, 0, 1, 96, MAX_RBOUNDS,
  2, 250, 205, 439, 730, 1, 0, 1, 95, MAX_RBOUNDS,
  2, 307, 387, 782, 828, 0, 1, 0, 95, MAX_RBOUNDS,
  2, 326, 378, 695, 924, 1, 0, 0, 95, MAX_RBOUNDS,
  2, 240, 217, 438, 622, 1, 0, 1, 97, MAX_RBOUNDS,
  2, 221, 466, 732, 360, 0, 0, 1, 97, MAX_RBOUNDS,
  2, 421, 256, 336, 600, 1, 0, 1, 95, MAX_RBOUNDS,
]);

nodeCap = array2d(Nodes0, Res, [bestBounds[r] | r in Res] ++ [
  8, 106520, 174521, 24600, 10095, 1, 1, 1, 99, 0,
  16, 127123, 305051, 24545, 22781, 1, 1, 1, 99, 0,
  8, 112485, 942799, 23420, 21325, 0, 0, 1, 99, 0,
]);

cost = array2d(Nodes0, Res, [
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, % no node
  17, 8, 20, 0, 0, 0, 0, 0, 0, 0,
  16, 10, 16, 0, 0, 0, 0, 0, 0, 0,
  14, 5, 20, 0, 0, 0, 0, 0, 0, 0,
]);

carb = array2d(Nodes0, Res, [
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, % no node
  13, 12, 26, 0, 0, 0, 0, 0, 0, 0,
  49, 26, 44, 0, 0, 0, 0, 0, 0, 0,
  17, 34, 25, 0, 0, 0, 0, 0, 0, 0,
]);

costBudget = 62482;
carbBudget = 55581;

depReq = array4d(Comps, Flavs, Comps, Res, [
  if c1 = frontend2 /\ c2 = backend0 /\ r = N(avail) then
    97
  elseif c1 = frontend0 /\ c2 = backend0 /\ r = N(avail) then
    97
  elseif c1 = frontend1 /\ c2 = backend2 /\ r = N(avail) then
    97
  elseif c1 = frontend1 /\ c2 = backend1 /\ r = N(avail) then
    95
  elseif c1 = frontend0 /\ c2 = backend1 /\ r = N(avail) then
    97
  elseif c1 = frontend2 /\ c2 = backend2 /\ r = N(avail) then
    96
  elseif c1 = frontend1 /\ c2 = backend0 /\ r = N(avail) then
    96
  elseif c1 = frontend0 /\ c2 = backend2 /\ r = N(avail) then
    95
  else
    worstBounds[r]
  endif | c1 in Comps, i in Flavs, c2 in Comps, r in Res]);

linkCap = array3d(Nodes0, Nodes0, Res, [
  if ni = 0 \/ nj = 0 then
    bestBounds[r]
  elseif ni = nj /\ r = N(avail) then
    nodeCap[ni,r]
  elseif {ni, nj} = {n1, n3} /\ r = N(avail) then
    98
  elseif {ni, nj} = {n1, n2} /\ r = N(avail) then
    98
  elseif {ni, nj} = {n2, n3} /\ r = N(avail) then
    98
  else
    worstBounds[r]
  endif | ni in Nodes0, nj in Nodes0, r in Res]);

imp = array2d(Comps, Flavs, [
  2, 4, 5,
  1, 2, 7,
  2, 7, 9,
  1, 3, 4,
  1, 5, 6,
  5, 6, 9,
  2, 4, 5,
  1, 3, 4,
]);

